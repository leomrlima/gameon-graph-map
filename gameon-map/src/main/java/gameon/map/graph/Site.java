package gameon.map.graph;

import org.jnosql.artemis.Column;
import org.jnosql.artemis.Entity;
import org.jnosql.artemis.Id;
import org.joda.beans.BeanDefinition;
import org.joda.beans.PropertyDefinition;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
@Entity
public class Site implements Bean {

    @PropertyDefinition(validate = "notEmpty")
    @Id
    private String id;

    @PropertyDefinition(validate = "notEmpty")
    @Column
    private String name;

    /**
     * Connection type
     */
    @PropertyDefinition(validate = "notEmpty")
    @Column
    private String connectionType;

    /**
     * Connection target, usually a URL
     */
    @PropertyDefinition(validate = "notEmpty")
    @Column
    private String connectionTarget;

    /**
     * (Optional) A token used for mutual identification between the room and
     * the mediator during the initial handshake when the connection is
     * established
     */
    @PropertyDefinition
    @Column
    private String connectionToken;

    /**
     * (Optional) Human-friendly room name
     */
    @PropertyDefinition
    @Column
    private String fullName;

    /**
     * (Optional) Player-friendly room description (140 characters)
     */
    @PropertyDefinition
    @Column
    private String description;

    @PropertyDefinition(validate = "notEmpty")
    @Column
    private String owner;

    @PropertyDefinition
    @Column
    private int x;

    @PropertyDefinition
    @Column
    private int y;

    @PropertyDefinition
    @Column
    private boolean empty;
    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code Site}.
     * @return the meta-bean, not null
     */
    public static Site.Meta meta() {
        return Site.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(Site.Meta.INSTANCE);
    }

    @Override
    public Site.Meta metaBean() {
        return Site.Meta.INSTANCE;
    }

    @Override
    public <R> Property<R> property(String propertyName) {
        return metaBean().<R>metaProperty(propertyName).createProperty(this);
    }

    @Override
    public Set<String> propertyNames() {
        return metaBean().metaPropertyMap().keySet();
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the id.
     * @return the value of the property, not empty
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the id.
     * @param id  the new value of the property, not empty
     */
    public void setId(String id) {
        JodaBeanUtils.notEmpty(id, "id");
        this.id = id;
    }

    /**
     * Gets the the {@code id} property.
     * @return the property, not null
     */
    public final Property<String> id() {
        return metaBean().id().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the name.
     * @return the value of the property, not empty
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name.
     * @param name  the new value of the property, not empty
     */
    public void setName(String name) {
        JodaBeanUtils.notEmpty(name, "name");
        this.name = name;
    }

    /**
     * Gets the the {@code name} property.
     * @return the property, not null
     */
    public final Property<String> name() {
        return metaBean().name().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets connection type
     * @return the value of the property, not empty
     */
    public String getConnectionType() {
        return connectionType;
    }

    /**
     * Sets connection type
     * @param connectionType  the new value of the property, not empty
     */
    public void setConnectionType(String connectionType) {
        JodaBeanUtils.notEmpty(connectionType, "connectionType");
        this.connectionType = connectionType;
    }

    /**
     * Gets the the {@code connectionType} property.
     * @return the property, not null
     */
    public final Property<String> connectionType() {
        return metaBean().connectionType().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets connection target, usually a URL
     * @return the value of the property, not empty
     */
    public String getConnectionTarget() {
        return connectionTarget;
    }

    /**
     * Sets connection target, usually a URL
     * @param connectionTarget  the new value of the property, not empty
     */
    public void setConnectionTarget(String connectionTarget) {
        JodaBeanUtils.notEmpty(connectionTarget, "connectionTarget");
        this.connectionTarget = connectionTarget;
    }

    /**
     * Gets the the {@code connectionTarget} property.
     * @return the property, not null
     */
    public final Property<String> connectionTarget() {
        return metaBean().connectionTarget().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets (Optional) A token used for mutual identification between the room and
     * the mediator during the initial handshake when the connection is
     * established
     * @return the value of the property
     */
    public String getConnectionToken() {
        return connectionToken;
    }

    /**
     * Sets (Optional) A token used for mutual identification between the room and
     * the mediator during the initial handshake when the connection is
     * established
     * @param connectionToken  the new value of the property
     */
    public void setConnectionToken(String connectionToken) {
        this.connectionToken = connectionToken;
    }

    /**
     * Gets the the {@code connectionToken} property.
     * the mediator during the initial handshake when the connection is
     * established
     * @return the property, not null
     */
    public final Property<String> connectionToken() {
        return metaBean().connectionToken().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets (Optional) Human-friendly room name
     * @return the value of the property
     */
    public String getFullName() {
        return fullName;
    }

    /**
     * Sets (Optional) Human-friendly room name
     * @param fullName  the new value of the property
     */
    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    /**
     * Gets the the {@code fullName} property.
     * @return the property, not null
     */
    public final Property<String> fullName() {
        return metaBean().fullName().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets (Optional) Player-friendly room description (140 characters)
     * @return the value of the property
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets (Optional) Player-friendly room description (140 characters)
     * @param description  the new value of the property
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Gets the the {@code description} property.
     * @return the property, not null
     */
    public final Property<String> description() {
        return metaBean().description().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the owner.
     * @return the value of the property, not empty
     */
    public String getOwner() {
        return owner;
    }

    /**
     * Sets the owner.
     * @param owner  the new value of the property, not empty
     */
    public void setOwner(String owner) {
        JodaBeanUtils.notEmpty(owner, "owner");
        this.owner = owner;
    }

    /**
     * Gets the the {@code owner} property.
     * @return the property, not null
     */
    public final Property<String> owner() {
        return metaBean().owner().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the x.
     * @return the value of the property
     */
    public int getX() {
        return x;
    }

    /**
     * Sets the x.
     * @param x  the new value of the property
     */
    public void setX(int x) {
        this.x = x;
    }

    /**
     * Gets the the {@code x} property.
     * @return the property, not null
     */
    public final Property<Integer> x() {
        return metaBean().x().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the y.
     * @return the value of the property
     */
    public int getY() {
        return y;
    }

    /**
     * Sets the y.
     * @param y  the new value of the property
     */
    public void setY(int y) {
        this.y = y;
    }

    /**
     * Gets the the {@code y} property.
     * @return the property, not null
     */
    public final Property<Integer> y() {
        return metaBean().y().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the empty.
     * @return the value of the property
     */
    public boolean isEmpty() {
        return empty;
    }

    /**
     * Sets the empty.
     * @param empty  the new value of the property
     */
    public void setEmpty(boolean empty) {
        this.empty = empty;
    }

    /**
     * Gets the the {@code empty} property.
     * @return the property, not null
     */
    public final Property<Boolean> empty() {
        return metaBean().empty().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public Site clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Site)) {
            return false;
        }
        Site site = (Site) o;
        return x == site.x &&
                y == site.y &&
                empty == site.empty &&
                Objects.equals(id, site.id) &&
                Objects.equals(name, site.name) &&
                Objects.equals(connectionType, site.connectionType) &&
                Objects.equals(connectionTarget, site.connectionTarget) &&
                Objects.equals(connectionToken, site.connectionToken) &&
                Objects.equals(fullName, site.fullName) &&
                Objects.equals(description, site.description) &&
                Objects.equals(owner, site.owner);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, name, connectionType, connectionTarget, connectionToken, fullName, description, owner, x, y, empty);
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(384);
        buf.append("Site{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("id").append('=').append(JodaBeanUtils.toString(getId())).append(',').append(' ');
        buf.append("name").append('=').append(JodaBeanUtils.toString(getName())).append(',').append(' ');
        buf.append("connectionType").append('=').append(JodaBeanUtils.toString(getConnectionType())).append(',').append(' ');
        buf.append("connectionTarget").append('=').append(JodaBeanUtils.toString(getConnectionTarget())).append(',').append(' ');
        buf.append("connectionToken").append('=').append(JodaBeanUtils.toString(getConnectionToken())).append(',').append(' ');
        buf.append("fullName").append('=').append(JodaBeanUtils.toString(getFullName())).append(',').append(' ');
        buf.append("description").append('=').append(JodaBeanUtils.toString(getDescription())).append(',').append(' ');
        buf.append("owner").append('=').append(JodaBeanUtils.toString(getOwner())).append(',').append(' ');
        buf.append("x").append('=').append(JodaBeanUtils.toString(getX())).append(',').append(' ');
        buf.append("y").append('=').append(JodaBeanUtils.toString(getY())).append(',').append(' ');
        buf.append("empty").append('=').append(JodaBeanUtils.toString(isEmpty())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code Site}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code id} property.
         */
        private final MetaProperty<String> id = DirectMetaProperty.ofReadWrite(
                this, "id", Site.class, String.class);
        /**
         * The meta-property for the {@code name} property.
         */
        private final MetaProperty<String> name = DirectMetaProperty.ofReadWrite(
                this, "name", Site.class, String.class);
        /**
         * The meta-property for the {@code connectionType} property.
         */
        private final MetaProperty<String> connectionType = DirectMetaProperty.ofReadWrite(
                this, "connectionType", Site.class, String.class);
        /**
         * The meta-property for the {@code connectionTarget} property.
         */
        private final MetaProperty<String> connectionTarget = DirectMetaProperty.ofReadWrite(
                this, "connectionTarget", Site.class, String.class);
        /**
         * The meta-property for the {@code connectionToken} property.
         */
        private final MetaProperty<String> connectionToken = DirectMetaProperty.ofReadWrite(
                this, "connectionToken", Site.class, String.class);
        /**
         * The meta-property for the {@code fullName} property.
         */
        private final MetaProperty<String> fullName = DirectMetaProperty.ofReadWrite(
                this, "fullName", Site.class, String.class);
        /**
         * The meta-property for the {@code description} property.
         */
        private final MetaProperty<String> description = DirectMetaProperty.ofReadWrite(
                this, "description", Site.class, String.class);
        /**
         * The meta-property for the {@code owner} property.
         */
        private final MetaProperty<String> owner = DirectMetaProperty.ofReadWrite(
                this, "owner", Site.class, String.class);
        /**
         * The meta-property for the {@code x} property.
         */
        private final MetaProperty<Integer> x = DirectMetaProperty.ofReadWrite(
                this, "x", Site.class, Integer.TYPE);
        /**
         * The meta-property for the {@code y} property.
         */
        private final MetaProperty<Integer> y = DirectMetaProperty.ofReadWrite(
                this, "y", Site.class, Integer.TYPE);
        /**
         * The meta-property for the {@code empty} property.
         */
        private final MetaProperty<Boolean> empty = DirectMetaProperty.ofReadWrite(
                this, "empty", Site.class, Boolean.TYPE);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "id",
                "name",
                "connectionType",
                "connectionTarget",
                "connectionToken",
                "fullName",
                "description",
                "owner",
                "x",
                "y",
                "empty");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return id;
                case 3373707:  // name
                    return name;
                case 1270211384:  // connectionType
                    return connectionType;
                case 880328207:  // connectionTarget
                    return connectionTarget;
                case 721544635:  // connectionToken
                    return connectionToken;
                case 1330852282:  // fullName
                    return fullName;
                case -1724546052:  // description
                    return description;
                case 106164915:  // owner
                    return owner;
                case 120:  // x
                    return x;
                case 121:  // y
                    return y;
                case 96634189:  // empty
                    return empty;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends Site> builder() {
            return new DirectBeanBuilder<Site>(new Site());
        }

        @Override
        public Class<? extends Site> beanType() {
            return Site.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code id} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> id() {
            return id;
        }

        /**
         * The meta-property for the {@code name} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> name() {
            return name;
        }

        /**
         * The meta-property for the {@code connectionType} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> connectionType() {
            return connectionType;
        }

        /**
         * The meta-property for the {@code connectionTarget} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> connectionTarget() {
            return connectionTarget;
        }

        /**
         * The meta-property for the {@code connectionToken} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> connectionToken() {
            return connectionToken;
        }

        /**
         * The meta-property for the {@code fullName} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> fullName() {
            return fullName;
        }

        /**
         * The meta-property for the {@code description} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> description() {
            return description;
        }

        /**
         * The meta-property for the {@code owner} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> owner() {
            return owner;
        }

        /**
         * The meta-property for the {@code x} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> x() {
            return x;
        }

        /**
         * The meta-property for the {@code y} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> y() {
            return y;
        }

        /**
         * The meta-property for the {@code empty} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Boolean> empty() {
            return empty;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return ((Site) bean).getId();
                case 3373707:  // name
                    return ((Site) bean).getName();
                case 1270211384:  // connectionType
                    return ((Site) bean).getConnectionType();
                case 880328207:  // connectionTarget
                    return ((Site) bean).getConnectionTarget();
                case 721544635:  // connectionToken
                    return ((Site) bean).getConnectionToken();
                case 1330852282:  // fullName
                    return ((Site) bean).getFullName();
                case -1724546052:  // description
                    return ((Site) bean).getDescription();
                case 106164915:  // owner
                    return ((Site) bean).getOwner();
                case 120:  // x
                    return ((Site) bean).getX();
                case 121:  // y
                    return ((Site) bean).getY();
                case 96634189:  // empty
                    return ((Site) bean).isEmpty();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    ((Site) bean).setId((String) newValue);
                    return;
                case 3373707:  // name
                    ((Site) bean).setName((String) newValue);
                    return;
                case 1270211384:  // connectionType
                    ((Site) bean).setConnectionType((String) newValue);
                    return;
                case 880328207:  // connectionTarget
                    ((Site) bean).setConnectionTarget((String) newValue);
                    return;
                case 721544635:  // connectionToken
                    ((Site) bean).setConnectionToken((String) newValue);
                    return;
                case 1330852282:  // fullName
                    ((Site) bean).setFullName((String) newValue);
                    return;
                case -1724546052:  // description
                    ((Site) bean).setDescription((String) newValue);
                    return;
                case 106164915:  // owner
                    ((Site) bean).setOwner((String) newValue);
                    return;
                case 120:  // x
                    ((Site) bean).setX((Integer) newValue);
                    return;
                case 121:  // y
                    ((Site) bean).setY((Integer) newValue);
                    return;
                case 96634189:  // empty
                    ((Site) bean).setEmpty((Boolean) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

        @Override
        protected void validate(Bean bean) {
            JodaBeanUtils.notEmpty(((Site) bean).id, "id");
            JodaBeanUtils.notEmpty(((Site) bean).name, "name");
            JodaBeanUtils.notEmpty(((Site) bean).connectionType, "connectionType");
            JodaBeanUtils.notEmpty(((Site) bean).connectionTarget, "connectionTarget");
            JodaBeanUtils.notEmpty(((Site) bean).owner, "owner");
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}
